syntax = "proto3";
package api;

import "google/protobuf/empty.proto";

service API {
    // Opens a new transaction stream with the given filter.
    rpc SubscribeNewTxsV2 (TxFilter) returns (stream TransactionWithSenderMsg) {}

    // Opens a new blob transaction stream with the given filter.
    rpc SubscribeNewBlobTxs (google.protobuf.Empty) returns (stream TransactionWithSenderMsg) {}

    // Sends a signed transaction to the network.
    rpc SendTransactionV2 (stream TransactionMsg) returns (stream TransactionResponse) {}

    // Sends a sequence of signed, RLP encoded transactions to the network.
    rpc SendRawTransactionSequence (stream RawTxSequenceMsg) returns (stream TxSequenceResponse) {}

    // Opens a stream of new execution payloads.
    rpc SubscribeExecutionPayloadsV2 (google.protobuf.Empty) returns (stream ExecutionPayloadMsg) {}

    // Opens a stream of new beacon blocks.
    rpc SubscribeBeaconBlocksV2 (google.protobuf.Empty) returns (stream BeaconBlockMsg) {}

    // Opens a bi-directional stream for new block submissions. The client stream is used to send
    // SSZ-encoded beacon blocks, and the server stream is used to send back the state_root, slot and
    // a local timestamp as a confirmation that the block was seen and handled.
    rpc SubmitBlockStream (stream BlockSubmissionMsg) returns (stream BlockSubmissionResponse) {}
}

message RawTxSequenceMsg {
    repeated bytes raw_txs = 1;
}

message TxSequenceResponse {
    repeated TransactionResponse sequence_response = 1;
}

message TxFilter {
    bytes encoded = 1;
}

message BlockSubmissionMsg {
    bytes ssz_block = 1;
}

/// An enveloped, RLP-encoded transaction.
message TransactionMsg {
    /// The enveloped, RLP-encoded transaction bytes.
    bytes rlp_transaction = 1;
}

message TransactionWithSenderMsg {
    /// The enveloped, RLP-encoded transaction bytes.
    bytes rlp_transaction = 1;
    /// The address of the sender / signer.
    bytes sender = 2;
}

/// An SSZ encoded execution payload.
message ExecutionPayloadMsg {
    // The fork data version.
    uint32 data_version = 1;
    // The SSZ encoded execution payload.
    bytes ssz_payload = 2;
}

message BeaconBlockMsg {
    // The beacon block version.
    uint32 data_version = 1;
    // The SSZ encoded beacon block.
    bytes ssz_block = 2;
}

message BlockSubmissionResponse {
    // The slot of the block.
    uint64 slot = 1;
    // The re-calculated state root after reconstructing the block.
    bytes state_root = 2;
    // Timestamp in microseconds.
    uint64 timestamp = 3;
}

message TransactionResponse {
    string hash = 1;
    int64 timestamp = 2;
}
