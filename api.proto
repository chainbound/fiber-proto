syntax = "proto3";
package api;

import "eth.proto";
import "google/protobuf/empty.proto";

service API {
    // Opens a new transaction stream with the given filter.
    rpc SubscribeNewTxs (TxFilter) returns (stream eth.Transaction) {}
    // Sends a signed transaction to the network.
    rpc SendTransaction (stream eth.Transaction) returns (stream TransactionResponse) {}
    // Sends a signed, RLP encoded transaction to the network
    rpc SendRawTransaction (stream RawTxMsg) returns (stream TransactionResponse) {}
    // Sends a sequence of signed transactions to the network.
    rpc SendTransactionSequence (stream TxSequenceMsg) returns (stream TxSequenceResponse) {}
    // Sends a sequence of signed, RLP encoded transactions to the network.
    rpc SendRawTransactionSequence (stream RawTxSequenceMsg) returns (stream TxSequenceResponse) {}
    // Opens a stream of new execution payloads.
    rpc SubscribeExecutionPayloads (google.protobuf.Empty) returns (stream eth.ExecutionPayload) {}
    // Opens a stream of new execution payload headers.
    rpc SubscribeExecutionHeaders (google.protobuf.Empty) returns (stream eth.ExecutionPayloadHeader) {}
    // Opens a stream of new beacon blocks. The beacon blocks are "compacted", meaning that the
    // execution payload is not included.
    rpc SubscribeBeaconBlocks (google.protobuf.Empty) returns (stream eth.CompactBeaconBlock) {}
    // Opens a bi-directional stream for new block submissions. The client stream is used to send
    // SSZ-encoded beacon blocks, and the server stream is used to send back the state_root, slot and 
    // a local timestamp as a confirmation that the block was seen and handled.
    rpc SubmitBlockStream (stream BlockSubmissionMsg) returns (stream BlockSubmissionResponse) {}
}

message TxSequenceMsg {
    repeated eth.Transaction sequence = 1;
}

message RawTxSequenceMsg {
    repeated bytes raw_txs = 1;
}

message TxSequenceResponse {
    repeated TransactionResponse sequence_response = 1;
}

message TxFilter {
    bytes encoded = 1;
}

message BlockFilter {
    string producer = 1;
}

message RawTxMsg {
    bytes rawTx = 1;
}

message BlockSubmissionMsg {
    bytes ssz_block = 1;
}

message BlockSubmissionResponse {
    // The slot of the block.
    uint64 slot = 1;
    // The re-calculated state root after reconstructing the block.
    bytes state_root = 2;
    // Timestamp in microseconds.
    uint64 timestamp = 3;
}

message TransactionResponse {
    string hash = 1;
    int64 timestamp = 2;
}
