syntax = "proto3";
package api;

// option go_package = "github.com/chainbound/fiber/protobuf/api";

import "eth.proto";
import "google/protobuf/empty.proto";

service API {
    // Opens a new transaction stream with the given filter.
    rpc SubscribeNewTxs (TxFilter) returns (stream eth.Transaction) {}
    // Sends a signed transaction to the network.
    rpc SendTransaction (stream eth.Transaction) returns (stream TransactionResponse) {}
    // Sends a signed, RLP encoded transaction to the network
    rpc SendRawTransaction (stream RawTxMsg) returns (stream TransactionResponse) {}
    // Sends a sequence of signed transactions to the network.
    rpc SendTransactionSequence (stream TxSequenceMsg) returns (stream TxSequenceResponse) {}
    // Sends a sequence of signed, RLP encoded transactions to the network.
    rpc SendRawTransactionSequence (stream RawTxSequenceMsg) returns (stream TxSequenceResponse) {}
    // Opens a new block stream.
    rpc SubscribeNewBlocks (google.protobuf.Empty) returns (stream eth.Block) {}
}

message TxSequenceMsg {
    repeated eth.Transaction sequence = 1;
}

message RawTxSequenceMsg {
    repeated bytes raw_txs = 1;
}

message TxSequenceResponse {
    repeated TransactionResponse sequence_response = 1;
}

message TxFilter {
    bytes encoded = 1;
}

message BlockFilter {
    string producer = 1;
}

message RawTxMsg {
    bytes rawTx = 1;
}

message TransactionResponse {
    string hash = 1;
    int64 timestamp = 2;
}

message BackrunMsg {
    string hash = 1;
    eth.Transaction tx = 2;
}

message RawBackrunMsg {
    string hash = 1;
    bytes rawTx = 2;
}
